// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: spec/proto/tunnel.proto

package protocol

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =======================
// TunnelService Interface
// =======================

type TunnelService interface {
	Ping(context.Context, *ClientPingRequest) (*ClientPingResponse, error)

	RegisterIdentity(context.Context, *RegisterIdentityRequest) (*RegisterIdentityResponse, error)

	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)

	GenerateHostname(context.Context, *GenerateHostnameRequest) (*GenerateHostnameResponse, error)

	RegisteredHostnames(context.Context, *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error)

	PublishTunnel(context.Context, *PublishTunnelRequest) (*PublishTunnelResponse, error)

	UnpublishTunnel(context.Context, *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error)

	ReleaseTunnel(context.Context, *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error)

	AcmeInstruction(context.Context, *InstructionRequest) (*InstructionResponse, error)

	AcmeValidate(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

// =============================
// TunnelService Protobuf Client
// =============================

type tunnelServiceProtobufClient struct {
	client      HTTPClient
	urls        [10]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewTunnelServiceProtobufClient creates a Protobuf client that implements the TunnelService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewTunnelServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) TunnelService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "protocol", "TunnelService")
	urls := [10]string{
		serviceURL + "Ping",
		serviceURL + "RegisterIdentity",
		serviceURL + "GetNodes",
		serviceURL + "GenerateHostname",
		serviceURL + "RegisteredHostnames",
		serviceURL + "PublishTunnel",
		serviceURL + "UnpublishTunnel",
		serviceURL + "ReleaseTunnel",
		serviceURL + "AcmeInstruction",
		serviceURL + "AcmeValidate",
	}

	return &tunnelServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *tunnelServiceProtobufClient) Ping(ctx context.Context, in *ClientPingRequest) (*ClientPingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	caller := c.callPing
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ClientPingRequest) (*ClientPingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClientPingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClientPingRequest) when calling interceptor")
					}
					return c.callPing(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ClientPingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ClientPingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callPing(ctx context.Context, in *ClientPingRequest) (*ClientPingResponse, error) {
	out := new(ClientPingResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) RegisterIdentity(ctx context.Context, in *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterIdentity")
	caller := c.callRegisterIdentity
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterIdentityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterIdentityRequest) when calling interceptor")
					}
					return c.callRegisterIdentity(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterIdentityResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterIdentityResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callRegisterIdentity(ctx context.Context, in *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
	out := new(RegisterIdentityResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) GetNodes(ctx context.Context, in *GetNodesRequest) (*GetNodesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "GetNodes")
	caller := c.callGetNodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetNodesRequest) (*GetNodesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNodesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNodesRequest) when calling interceptor")
					}
					return c.callGetNodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callGetNodes(ctx context.Context, in *GetNodesRequest) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) GenerateHostname(ctx context.Context, in *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateHostname")
	caller := c.callGenerateHostname
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateHostnameRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateHostnameRequest) when calling interceptor")
					}
					return c.callGenerateHostname(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateHostnameResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateHostnameResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callGenerateHostname(ctx context.Context, in *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
	out := new(GenerateHostnameResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) RegisteredHostnames(ctx context.Context, in *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "RegisteredHostnames")
	caller := c.callRegisteredHostnames
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisteredHostnamesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisteredHostnamesRequest) when calling interceptor")
					}
					return c.callRegisteredHostnames(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisteredHostnamesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisteredHostnamesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callRegisteredHostnames(ctx context.Context, in *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
	out := new(RegisteredHostnamesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) PublishTunnel(ctx context.Context, in *PublishTunnelRequest) (*PublishTunnelResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "PublishTunnel")
	caller := c.callPublishTunnel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PublishTunnelRequest) (*PublishTunnelResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PublishTunnelRequest) when calling interceptor")
					}
					return c.callPublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callPublishTunnel(ctx context.Context, in *PublishTunnelRequest) (*PublishTunnelResponse, error) {
	out := new(PublishTunnelResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) UnpublishTunnel(ctx context.Context, in *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "UnpublishTunnel")
	caller := c.callUnpublishTunnel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnpublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnpublishTunnelRequest) when calling interceptor")
					}
					return c.callUnpublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnpublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnpublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callUnpublishTunnel(ctx context.Context, in *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
	out := new(UnpublishTunnelResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) ReleaseTunnel(ctx context.Context, in *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "ReleaseTunnel")
	caller := c.callReleaseTunnel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleaseTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleaseTunnelRequest) when calling interceptor")
					}
					return c.callReleaseTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleaseTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleaseTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callReleaseTunnel(ctx context.Context, in *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
	out := new(ReleaseTunnelResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) AcmeInstruction(ctx context.Context, in *InstructionRequest) (*InstructionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "AcmeInstruction")
	caller := c.callAcmeInstruction
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *InstructionRequest) (*InstructionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*InstructionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*InstructionRequest) when calling interceptor")
					}
					return c.callAcmeInstruction(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstructionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstructionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callAcmeInstruction(ctx context.Context, in *InstructionRequest) (*InstructionResponse, error) {
	out := new(InstructionResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceProtobufClient) AcmeValidate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "AcmeValidate")
	caller := c.callAcmeValidate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return c.callAcmeValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceProtobufClient) callAcmeValidate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =========================
// TunnelService JSON Client
// =========================

type tunnelServiceJSONClient struct {
	client      HTTPClient
	urls        [10]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewTunnelServiceJSONClient creates a JSON client that implements the TunnelService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewTunnelServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) TunnelService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "protocol", "TunnelService")
	urls := [10]string{
		serviceURL + "Ping",
		serviceURL + "RegisterIdentity",
		serviceURL + "GetNodes",
		serviceURL + "GenerateHostname",
		serviceURL + "RegisteredHostnames",
		serviceURL + "PublishTunnel",
		serviceURL + "UnpublishTunnel",
		serviceURL + "ReleaseTunnel",
		serviceURL + "AcmeInstruction",
		serviceURL + "AcmeValidate",
	}

	return &tunnelServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *tunnelServiceJSONClient) Ping(ctx context.Context, in *ClientPingRequest) (*ClientPingResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	caller := c.callPing
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ClientPingRequest) (*ClientPingResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClientPingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClientPingRequest) when calling interceptor")
					}
					return c.callPing(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ClientPingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ClientPingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callPing(ctx context.Context, in *ClientPingRequest) (*ClientPingResponse, error) {
	out := new(ClientPingResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) RegisterIdentity(ctx context.Context, in *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterIdentity")
	caller := c.callRegisterIdentity
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterIdentityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterIdentityRequest) when calling interceptor")
					}
					return c.callRegisterIdentity(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterIdentityResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterIdentityResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callRegisterIdentity(ctx context.Context, in *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
	out := new(RegisterIdentityResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) GetNodes(ctx context.Context, in *GetNodesRequest) (*GetNodesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "GetNodes")
	caller := c.callGetNodes
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetNodesRequest) (*GetNodesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNodesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNodesRequest) when calling interceptor")
					}
					return c.callGetNodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callGetNodes(ctx context.Context, in *GetNodesRequest) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) GenerateHostname(ctx context.Context, in *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "GenerateHostname")
	caller := c.callGenerateHostname
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateHostnameRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateHostnameRequest) when calling interceptor")
					}
					return c.callGenerateHostname(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateHostnameResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateHostnameResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callGenerateHostname(ctx context.Context, in *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
	out := new(GenerateHostnameResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) RegisteredHostnames(ctx context.Context, in *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "RegisteredHostnames")
	caller := c.callRegisteredHostnames
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisteredHostnamesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisteredHostnamesRequest) when calling interceptor")
					}
					return c.callRegisteredHostnames(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisteredHostnamesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisteredHostnamesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callRegisteredHostnames(ctx context.Context, in *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
	out := new(RegisteredHostnamesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) PublishTunnel(ctx context.Context, in *PublishTunnelRequest) (*PublishTunnelResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "PublishTunnel")
	caller := c.callPublishTunnel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PublishTunnelRequest) (*PublishTunnelResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PublishTunnelRequest) when calling interceptor")
					}
					return c.callPublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callPublishTunnel(ctx context.Context, in *PublishTunnelRequest) (*PublishTunnelResponse, error) {
	out := new(PublishTunnelResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) UnpublishTunnel(ctx context.Context, in *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "UnpublishTunnel")
	caller := c.callUnpublishTunnel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnpublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnpublishTunnelRequest) when calling interceptor")
					}
					return c.callUnpublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnpublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnpublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callUnpublishTunnel(ctx context.Context, in *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
	out := new(UnpublishTunnelResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) ReleaseTunnel(ctx context.Context, in *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "ReleaseTunnel")
	caller := c.callReleaseTunnel
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleaseTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleaseTunnelRequest) when calling interceptor")
					}
					return c.callReleaseTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleaseTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleaseTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callReleaseTunnel(ctx context.Context, in *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
	out := new(ReleaseTunnelResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) AcmeInstruction(ctx context.Context, in *InstructionRequest) (*InstructionResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "AcmeInstruction")
	caller := c.callAcmeInstruction
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *InstructionRequest) (*InstructionResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*InstructionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*InstructionRequest) when calling interceptor")
					}
					return c.callAcmeInstruction(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstructionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstructionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callAcmeInstruction(ctx context.Context, in *InstructionRequest) (*InstructionResponse, error) {
	out := new(InstructionResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *tunnelServiceJSONClient) AcmeValidate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithMethodName(ctx, "AcmeValidate")
	caller := c.callAcmeValidate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return c.callAcmeValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *tunnelServiceJSONClient) callAcmeValidate(ctx context.Context, in *ValidateRequest) (*ValidateResponse, error) {
	out := new(ValidateResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ============================
// TunnelService Server Handler
// ============================

type tunnelServiceServer struct {
	TunnelService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewTunnelServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewTunnelServiceServer(svc TunnelService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &tunnelServiceServer{
		TunnelService:    svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *tunnelServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *tunnelServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// TunnelServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const TunnelServicePathPrefix = "/twirp/protocol.TunnelService/"

func (s *tunnelServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "TunnelService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "protocol.TunnelService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Ping":
		s.servePing(ctx, resp, req)
		return
	case "RegisterIdentity":
		s.serveRegisterIdentity(ctx, resp, req)
		return
	case "GetNodes":
		s.serveGetNodes(ctx, resp, req)
		return
	case "GenerateHostname":
		s.serveGenerateHostname(ctx, resp, req)
		return
	case "RegisteredHostnames":
		s.serveRegisteredHostnames(ctx, resp, req)
		return
	case "PublishTunnel":
		s.servePublishTunnel(ctx, resp, req)
		return
	case "UnpublishTunnel":
		s.serveUnpublishTunnel(ctx, resp, req)
		return
	case "ReleaseTunnel":
		s.serveReleaseTunnel(ctx, resp, req)
		return
	case "AcmeInstruction":
		s.serveAcmeInstruction(ctx, resp, req)
		return
	case "AcmeValidate":
		s.serveAcmeValidate(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *tunnelServiceServer) servePing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePingJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) servePingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ClientPingRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.Ping
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ClientPingRequest) (*ClientPingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClientPingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClientPingRequest) when calling interceptor")
					}
					return s.TunnelService.Ping(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ClientPingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ClientPingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ClientPingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ClientPingResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) servePingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ClientPingRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.Ping
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ClientPingRequest) (*ClientPingResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ClientPingRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ClientPingRequest) when calling interceptor")
					}
					return s.TunnelService.Ping(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ClientPingResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ClientPingResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ClientPingResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ClientPingResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveRegisterIdentity(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterIdentityJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterIdentityProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveRegisterIdentityJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterIdentity")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisterIdentityRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.RegisterIdentity
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterIdentityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterIdentityRequest) when calling interceptor")
					}
					return s.TunnelService.RegisterIdentity(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterIdentityResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterIdentityResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterIdentityResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterIdentityResponse and nil error while calling RegisterIdentity. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveRegisterIdentityProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterIdentity")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisterIdentityRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.RegisterIdentity
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisterIdentityRequest) (*RegisterIdentityResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisterIdentityRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisterIdentityRequest) when calling interceptor")
					}
					return s.TunnelService.RegisterIdentity(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisterIdentityResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisterIdentityResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisterIdentityResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisterIdentityResponse and nil error while calling RegisterIdentity. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveGetNodes(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetNodesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetNodesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveGetNodesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetNodesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.GetNodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetNodesRequest) (*GetNodesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNodesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNodesRequest) when calling interceptor")
					}
					return s.TunnelService.GetNodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetNodesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetNodesResponse and nil error while calling GetNodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveGetNodesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetNodes")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetNodesRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.GetNodes
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetNodesRequest) (*GetNodesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetNodesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetNodesRequest) when calling interceptor")
					}
					return s.TunnelService.GetNodes(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetNodesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetNodesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetNodesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetNodesResponse and nil error while calling GetNodes. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveGenerateHostname(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGenerateHostnameJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGenerateHostnameProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveGenerateHostnameJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateHostname")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GenerateHostnameRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.GenerateHostname
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateHostnameRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateHostnameRequest) when calling interceptor")
					}
					return s.TunnelService.GenerateHostname(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateHostnameResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateHostnameResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GenerateHostnameResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateHostnameResponse and nil error while calling GenerateHostname. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveGenerateHostnameProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GenerateHostname")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GenerateHostnameRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.GenerateHostname
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GenerateHostnameRequest) (*GenerateHostnameResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GenerateHostnameRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GenerateHostnameRequest) when calling interceptor")
					}
					return s.TunnelService.GenerateHostname(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GenerateHostnameResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GenerateHostnameResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GenerateHostnameResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GenerateHostnameResponse and nil error while calling GenerateHostname. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveRegisteredHostnames(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisteredHostnamesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisteredHostnamesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveRegisteredHostnamesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisteredHostnames")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(RegisteredHostnamesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.RegisteredHostnames
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisteredHostnamesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisteredHostnamesRequest) when calling interceptor")
					}
					return s.TunnelService.RegisteredHostnames(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisteredHostnamesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisteredHostnamesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisteredHostnamesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisteredHostnamesResponse and nil error while calling RegisteredHostnames. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveRegisteredHostnamesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisteredHostnames")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(RegisteredHostnamesRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.RegisteredHostnames
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *RegisteredHostnamesRequest) (*RegisteredHostnamesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*RegisteredHostnamesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*RegisteredHostnamesRequest) when calling interceptor")
					}
					return s.TunnelService.RegisteredHostnames(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*RegisteredHostnamesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*RegisteredHostnamesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *RegisteredHostnamesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisteredHostnamesResponse and nil error while calling RegisteredHostnames. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) servePublishTunnel(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePublishTunnelJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePublishTunnelProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) servePublishTunnelJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PublishTunnel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PublishTunnelRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.PublishTunnel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PublishTunnelRequest) (*PublishTunnelResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PublishTunnelRequest) when calling interceptor")
					}
					return s.TunnelService.PublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PublishTunnelResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PublishTunnelResponse and nil error while calling PublishTunnel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) servePublishTunnelProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PublishTunnel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PublishTunnelRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.PublishTunnel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PublishTunnelRequest) (*PublishTunnelResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PublishTunnelRequest) when calling interceptor")
					}
					return s.TunnelService.PublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PublishTunnelResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PublishTunnelResponse and nil error while calling PublishTunnel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveUnpublishTunnel(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUnpublishTunnelJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUnpublishTunnelProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveUnpublishTunnelJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UnpublishTunnel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UnpublishTunnelRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.UnpublishTunnel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnpublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnpublishTunnelRequest) when calling interceptor")
					}
					return s.TunnelService.UnpublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnpublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnpublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UnpublishTunnelResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UnpublishTunnelResponse and nil error while calling UnpublishTunnel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveUnpublishTunnelProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UnpublishTunnel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UnpublishTunnelRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.UnpublishTunnel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UnpublishTunnelRequest) (*UnpublishTunnelResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UnpublishTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UnpublishTunnelRequest) when calling interceptor")
					}
					return s.TunnelService.UnpublishTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UnpublishTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UnpublishTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UnpublishTunnelResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UnpublishTunnelResponse and nil error while calling UnpublishTunnel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveReleaseTunnel(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReleaseTunnelJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReleaseTunnelProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveReleaseTunnelJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReleaseTunnel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ReleaseTunnelRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.ReleaseTunnel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleaseTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleaseTunnelRequest) when calling interceptor")
					}
					return s.TunnelService.ReleaseTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleaseTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleaseTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReleaseTunnelResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReleaseTunnelResponse and nil error while calling ReleaseTunnel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveReleaseTunnelProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ReleaseTunnel")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ReleaseTunnelRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.ReleaseTunnel
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ReleaseTunnelRequest) (*ReleaseTunnelResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ReleaseTunnelRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ReleaseTunnelRequest) when calling interceptor")
					}
					return s.TunnelService.ReleaseTunnel(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ReleaseTunnelResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ReleaseTunnelResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ReleaseTunnelResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ReleaseTunnelResponse and nil error while calling ReleaseTunnel. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveAcmeInstruction(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAcmeInstructionJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAcmeInstructionProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveAcmeInstructionJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AcmeInstruction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(InstructionRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.AcmeInstruction
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *InstructionRequest) (*InstructionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*InstructionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*InstructionRequest) when calling interceptor")
					}
					return s.TunnelService.AcmeInstruction(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstructionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstructionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *InstructionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InstructionResponse and nil error while calling AcmeInstruction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveAcmeInstructionProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AcmeInstruction")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(InstructionRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.AcmeInstruction
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *InstructionRequest) (*InstructionResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*InstructionRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*InstructionRequest) when calling interceptor")
					}
					return s.TunnelService.AcmeInstruction(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*InstructionResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*InstructionResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *InstructionResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *InstructionResponse and nil error while calling AcmeInstruction. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveAcmeValidate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAcmeValidateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAcmeValidateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *tunnelServiceServer) serveAcmeValidateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AcmeValidate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ValidateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.TunnelService.AcmeValidate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return s.TunnelService.AcmeValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ValidateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValidateResponse and nil error while calling AcmeValidate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) serveAcmeValidateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AcmeValidate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ValidateRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.TunnelService.AcmeValidate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ValidateRequest) (*ValidateResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ValidateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ValidateRequest) when calling interceptor")
					}
					return s.TunnelService.AcmeValidate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ValidateResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ValidateResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ValidateResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValidateResponse and nil error while calling AcmeValidate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *tunnelServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor5, 0
}

func (s *tunnelServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *tunnelServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "protocol", "TunnelService")
}

var twirpFileDescriptor5 = []byte{
	// 1132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0xa7, 0x69, 0xb6, 0x39, 0x69, 0x12, 0x67, 0xfa, 0x97, 0x9d, 0x2d, 0xd0, 0x35, 0xa5,
	0x5b, 0xb1, 0x90, 0xa8, 0x01, 0xc1, 0x8a, 0xd5, 0x4a, 0x94, 0x34, 0xda, 0x56, 0x5b, 0x25, 0x91,
	0x9b, 0x76, 0x61, 0x05, 0x8a, 0x5c, 0xe7, 0x34, 0xb5, 0x9a, 0x78, 0x8c, 0x3d, 0x59, 0xe0, 0x9a,
	0x37, 0xc8, 0x4b, 0x70, 0xc3, 0x33, 0xf4, 0x82, 0x47, 0x41, 0x3c, 0x08, 0xb2, 0x67, 0x5c, 0x3b,
	0x8e, 0x53, 0x40, 0xe2, 0x2a, 0x9e, 0x39, 0xdf, 0xf9, 0xce, 0x37, 0xf6, 0x39, 0x5f, 0x06, 0xb6,
	0x3c, 0x07, 0xcd, 0xba, 0xe3, 0x32, 0xce, 0xea, 0x7c, 0x62, 0xdb, 0x38, 0xaa, 0x05, 0x0b, 0xb2,
	0x12, 0xfc, 0x98, 0x6c, 0x44, 0x37, 0x62, 0x10, 0x9b, 0x0d, 0x50, 0x00, 0xe8, 0x7a, 0x6c, 0xdb,
	0x61, 0x3f, 0xc9, 0xdd, 0x9d, 0x21, 0x63, 0xc3, 0x11, 0x8a, 0xfd, 0xcb, 0xc9, 0x55, 0x7d, 0x80,
	0x9e, 0xe9, 0x5a, 0x0e, 0x67, 0xae, 0x40, 0x68, 0xd3, 0x0c, 0x64, 0x4f, 0x2d, 0xfb, 0x86, 0x3c,
	0x85, 0xac, 0x31, 0x72, 0xec, 0xaa, 0xb2, 0xa3, 0xec, 0x97, 0x1a, 0x6b, 0xb5, 0xb0, 0x60, 0xcd,
	0x8f, 0xd6, 0x0e, 0x4f, 0xbb, 0x6d, 0x3d, 0x00, 0x10, 0x0a, 0x2b, 0xd7, 0xcc, 0xe3, 0xb6, 0x31,
	0xc6, 0x6a, 0x66, 0x47, 0xd9, 0xcf, 0xeb, 0x77, 0x6b, 0xb2, 0x09, 0x39, 0x17, 0xc7, 0x8c, 0x63,
	0x75, 0x29, 0x88, 0xc8, 0x95, 0xf6, 0xbb, 0x02, 0x59, 0x9f, 0x82, 0x14, 0xe0, 0xe1, 0x79, 0xfb,
	0x75, 0xbb, 0xf3, 0xa6, 0xad, 0x3e, 0x20, 0x7b, 0x50, 0x3c, 0xeb, 0xb6, 0x9a, 0xbd, 0x96, 0xde,
	0x6f, 0x1e, 0x77, 0xf4, 0x23, 0x55, 0xa1, 0x6b, 0xd3, 0x5b, 0x5a, 0xf6, 0x8f, 0xc2, 0xd1, 0xfd,
	0xd4, 0xbc, 0x66, 0xee, 0xa0, 0x7e, 0x40, 0xf6, 0xa1, 0x74, 0x87, 0x3b, 0x3d, 0x69, 0xb5, 0x7b,
	0x6a, 0x86, 0xae, 0x4f, 0x6f, 0xa9, 0x7a, 0x07, 0x1c, 0x59, 0x68, 0xf3, 0xfa, 0x01, 0xa9, 0xc0,
	0xf2, 0x71, 0xaf, 0xd7, 0x6d, 0xa8, 0x79, 0x9a, 0x9b, 0xde, 0xd2, 0xcc, 0x75, 0x83, 0x6c, 0x42,
	0xd6, 0xdf, 0x52, 0x81, 0xae, 0x4e, 0x6f, 0xe9, 0xca, 0x35, 0xe7, 0x4e, 0xfd, 0xa0, 0x76, 0x40,
	0x28, 0x2c, 0xf5, 0x9a, 0x5d, 0xb5, 0x40, 0x2b, 0xd3, 0x5b, 0x5a, 0x0c, 0x99, 0xb8, 0xe9, 0xd4,
	0x0f, 0xb4, 0x5f, 0x15, 0x28, 0x35, 0x27, 0x1e, 0x67, 0xe3, 0xe3, 0xf0, 0x64, 0x5f, 0x42, 0x59,
	0x54, 0xe9, 0x5b, 0x03, 0xb4, 0xb9, 0xc5, 0x7f, 0x09, 0xde, 0x54, 0xa1, 0x51, 0x8a, 0xde, 0x54,
	0x9b, 0x0d, 0x50, 0x2f, 0x09, 0xd8, 0x89, 0x44, 0x91, 0xe7, 0xb0, 0x2a, 0x13, 0x39, 0xbb, 0x41,
	0x3b, 0x78, 0x65, 0x85, 0xc6, 0x46, 0x94, 0xd5, 0x0c, 0xa2, 0x3d, 0x3f, 0xa8, 0x17, 0xcc, 0x68,
	0xa1, 0xfd, 0xa5, 0x40, 0xa1, 0x17, 0x34, 0x81, 0xce, 0x26, 0x1c, 0xc9, 0x4b, 0x20, 0x92, 0x69,
	0x80, 0x1e, 0xb7, 0x6c, 0x83, 0x5b, 0xcc, 0x5e, 0xa0, 0xa2, 0x22, 0x90, 0x47, 0x11, 0x90, 0xbc,
	0x80, 0x4a, 0xf0, 0x42, 0x67, 0xb2, 0x33, 0xa9, 0xd9, 0x6a, 0x00, 0x8c, 0x27, 0xbf, 0x04, 0x22,
	0xfa, 0x71, 0x26, 0x7b, 0x29, 0xbd, 0xb6, 0x40, 0xc6, 0xd3, 0xe3, 0x3d, 0x03, 0xb3, 0x3d, 0xa3,
	0x19, 0x50, 0xe9, 0xcd, 0x25, 0xec, 0xc2, 0x72, 0xa0, 0x61, 0xc1, 0xf1, 0x44, 0x90, 0xec, 0x41,
	0x4e, 0xd4, 0x5a, 0x70, 0x0e, 0x19, 0xd5, 0xbe, 0x85, 0x55, 0x51, 0xe2, 0x8c, 0x1b, 0x7c, 0xe2,
	0x91, 0x06, 0xe4, 0xbc, 0xe0, 0x29, 0xc8, 0x2b, 0x35, 0x68, 0x94, 0x17, 0xc7, 0x35, 0x03, 0x0e,
	0x81, 0x24, 0xeb, 0xb0, 0x8c, 0xae, 0xcb, 0x5c, 0xd9, 0xd9, 0x62, 0xa1, 0x7d, 0x08, 0x85, 0xd8,
	0xf7, 0xf3, 0x41, 0xe2, 0x2b, 0xfb, 0xb2, 0x57, 0x75, 0xb1, 0xd0, 0xd6, 0xa0, 0x22, 0x40, 0x5d,
	0xcb, 0x1e, 0xea, 0xf8, 0xe3, 0x04, 0x3d, 0xae, 0x9d, 0x02, 0x89, 0x6f, 0x7a, 0x0e, 0xb3, 0x3d,
	0x24, 0x1a, 0x64, 0xfd, 0xa1, 0x5e, 0x70, 0xec, 0x20, 0x46, 0x08, 0x64, 0x0d, 0x07, 0x7f, 0x96,
	0xc3, 0x17, 0x3c, 0x6b, 0x8f, 0x60, 0x4b, 0xc7, 0xa1, 0xe5, 0x71, 0x74, 0xc3, 0xce, 0x0b, 0x0b,
	0xd5, 0xa0, 0x3a, 0x1f, 0x92, 0xe5, 0xd2, 0xa8, 0x2a, 0x50, 0x7e, 0x85, 0xdc, 0xaf, 0xe7, 0x85,
	0x14, 0xcf, 0x41, 0x8d, 0xb6, 0x64, 0xea, 0x2e, 0x2c, 0xfb, 0x6a, 0xbc, 0xaa, 0xb2, 0xb3, 0x94,
	0xf6, 0x85, 0x82, 0xa0, 0xaf, 0xeb, 0x15, 0xda, 0xe8, 0x1a, 0x1c, 0xc3, 0x51, 0x0a, 0x49, 0xbf,
	0x80, 0xea, 0x7c, 0x48, 0x92, 0xc7, 0xfb, 0x45, 0x49, 0xf4, 0xcb, 0x36, 0xd0, 0xf0, 0x3c, 0x38,
	0x08, 0x33, 0xef, 0xa4, 0xbe, 0x80, 0xc7, 0xa9, 0x51, 0x49, 0xbc, 0x0d, 0xf9, 0x90, 0x48, 0x28,
	0xcf, 0xeb, 0xd1, 0x86, 0xf6, 0x3d, 0xac, 0x77, 0x27, 0x97, 0x23, 0xcb, 0xbb, 0x96, 0x73, 0x27,
	0x48, 0xef, 0x93, 0x43, 0xf6, 0xe1, 0xa1, 0x87, 0xee, 0x3b, 0x74, 0xfd, 0x66, 0x4a, 0x7b, 0x13,
	0x61, 0x58, 0x6b, 0xc1, 0x46, 0x82, 0x5d, 0x8a, 0xfa, 0x04, 0xf2, 0x8e, 0x08, 0xe0, 0x60, 0xc1,
	0xeb, 0x8c, 0x00, 0xda, 0xe7, 0xb0, 0x79, 0x6e, 0x3b, 0xff, 0x51, 0xa6, 0xff, 0x21, 0xe6, 0xb2,
	0x44, 0x79, 0xad, 0x01, 0xeb, 0x3a, 0x8e, 0xd0, 0xf0, 0xf0, 0xdf, 0xd3, 0x6d, 0xc1, 0x46, 0x22,
	0x47, 0x92, 0xfd, 0x00, 0xe4, 0xc4, 0xf6, 0xb8, 0x3b, 0x31, 0xfd, 0x39, 0x0e, 0xa9, 0x9e, 0xc1,
	0xb2, 0xe3, 0x32, 0x76, 0x25, 0xfb, 0x3a, 0xe6, 0x7e, 0x5d, 0x7f, 0xbb, 0x73, 0xf5, 0x86, 0xb9,
	0x37, 0xba, 0xc0, 0xdc, 0xf7, 0x07, 0xa3, 0x35, 0x61, 0x6d, 0x86, 0x3e, 0xea, 0xe3, 0x98, 0xcc,
	0xe0, 0x99, 0x54, 0xe1, 0xa1, 0xc9, 0x6c, 0x8e, 0x36, 0x97, 0x2c, 0xe1, 0x52, 0x7b, 0x0b, 0xe5,
	0x0b, 0x63, 0x64, 0x0d, 0x0c, 0x8e, 0xff, 0xbb, 0xc0, 0x3d, 0x50, 0x23, 0xee, 0xc4, 0x94, 0x29,
	0xd1, 0x94, 0x7d, 0xdc, 0x04, 0x35, 0x69, 0x35, 0xa4, 0x08, 0xf9, 0xb3, 0xde, 0x61, 0xef, 0xfc,
	0xac, 0xdf, 0x79, 0xad, 0x3e, 0x20, 0x15, 0x28, 0xca, 0xff, 0xca, 0x7e, 0x4b, 0xd7, 0x3b, 0xba,
	0xaa, 0xf8, 0x88, 0x76, 0xa7, 0x7f, 0x74, 0xa2, 0xb7, 0x9a, 0x3d, 0x35, 0xd3, 0xf8, 0x23, 0x07,
	0x45, 0xc9, 0x82, 0xee, 0x3b, 0xcb, 0x44, 0x72, 0x08, 0x59, 0xdf, 0x4f, 0xc8, 0xe3, 0xe4, 0xff,
	0x4b, 0xcc, 0x7a, 0xe8, 0x76, 0x7a, 0x50, 0xaa, 0xfd, 0x0e, 0xd4, 0xa4, 0x5f, 0x90, 0x27, 0x51,
	0xc6, 0x02, 0x9b, 0xa1, 0xda, 0x7d, 0x10, 0x49, 0x7d, 0x08, 0x2b, 0xa1, 0x8f, 0x90, 0x47, 0x11,
	0x3e, 0x61, 0x37, 0x94, 0xa6, 0x85, 0x22, 0x75, 0x49, 0xd7, 0x88, 0xab, 0x5b, 0x60, 0x36, 0x71,
	0x75, 0x0b, 0x4d, 0xe7, 0x12, 0xd6, 0x52, 0xac, 0x83, 0xec, 0xce, 0x1f, 0x6c, 0xde, 0x77, 0xe8,
	0x47, 0xff, 0x80, 0x92, 0x35, 0xba, 0x50, 0x9c, 0xf1, 0x00, 0xf2, 0x7e, 0xac, 0xd3, 0x52, 0x66,
	0x9a, 0x7e, 0xb0, 0x30, 0x2e, 0x19, 0x2f, 0xa0, 0x9c, 0x18, 0x6c, 0xb2, 0x13, 0xe5, 0xa4, 0x3b,
	0x05, 0x7d, 0x72, 0x0f, 0x22, 0x52, 0x3a, 0x33, 0xe1, 0x71, 0xa5, 0x69, 0x76, 0x11, 0x57, 0x9a,
	0x6a, 0x0d, 0xa4, 0x0d, 0xe5, 0x43, 0x73, 0x8c, 0xb1, 0xf9, 0x25, 0xb1, 0x4e, 0x9c, 0x77, 0x0d,
	0xfa, 0xde, 0x82, 0xa8, 0xe4, 0x6b, 0xc1, 0xaa, 0xcf, 0x17, 0x8e, 0x5b, 0xbc, 0xa3, 0x12, 0xe3,
	0x1d, 0xef, 0xa8, 0xe4, 0x74, 0x7e, 0xf5, 0x35, 0xe4, 0xfd, 0x7b, 0x6d, 0x5f, 0xb6, 0x92, 0xb8,
	0x31, 0xd7, 0xc2, 0x1b, 0x73, 0xad, 0x65, 0x4f, 0xc6, 0x17, 0xc6, 0x68, 0x82, 0x1d, 0xc7, 0xaf,
	0xee, 0x55, 0xff, 0xfc, 0x4d, 0xdc, 0x00, 0x56, 0xfc, 0xac, 0xb6, 0x31, 0xc6, 0x6f, 0x9e, 0x1d,
	0x2b, 0x6f, 0x9f, 0x0e, 0x59, 0x6d, 0x6c, 0xb9, 0xc6, 0x10, 0x3d, 0xc7, 0x30, 0xb1, 0x66, 0xb2,
	0xba, 0xbc, 0x53, 0xd6, 0xa3, 0x9b, 0xb9, 0xc9, 0x46, 0x97, 0xb9, 0xe0, 0xe9, 0xb3, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xba, 0x52, 0xae, 0x59, 0xeb, 0x0b, 0x00, 0x00,
}
