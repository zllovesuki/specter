// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: spec/proto/kv.proto

package protocol

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===================
// KVService Interface
// ===================

type KVService interface {
	Put(context.Context, *SimpleRequest) (*SimpleResponse, error)

	Get(context.Context, *SimpleRequest) (*SimpleResponse, error)

	Delete(context.Context, *SimpleRequest) (*SimpleResponse, error)

	Append(context.Context, *PrefixRequest) (*PrefixResponse, error)

	List(context.Context, *PrefixRequest) (*PrefixResponse, error)

	Contains(context.Context, *PrefixRequest) (*PrefixResponse, error)

	Remove(context.Context, *PrefixRequest) (*PrefixResponse, error)

	Acquire(context.Context, *LeaseRequest) (*LeaseResponse, error)

	Renew(context.Context, *LeaseRequest) (*LeaseResponse, error)

	Release(context.Context, *LeaseRequest) (*LeaseResponse, error)

	Import(context.Context, *ImportRequest) (*ImportResponse, error)
}

// =========================
// KVService Protobuf Client
// =========================

type kVServiceProtobufClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewKVServiceProtobufClient creates a Protobuf client that implements the KVService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewKVServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) KVService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "protocol", "KVService")
	urls := [11]string{
		serviceURL + "Put",
		serviceURL + "Get",
		serviceURL + "Delete",
		serviceURL + "Append",
		serviceURL + "List",
		serviceURL + "Contains",
		serviceURL + "Remove",
		serviceURL + "Acquire",
		serviceURL + "Renew",
		serviceURL + "Release",
		serviceURL + "Import",
	}

	return &kVServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *kVServiceProtobufClient) Put(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Put")
	caller := c.callPut
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return c.callPut(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callPut(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Get(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	caller := c.callGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return c.callGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callGet(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Delete(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	caller := c.callDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return c.callDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callDelete(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Append(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Append")
	caller := c.callAppend
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callAppend(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callAppend(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) List(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "List")
	caller := c.callList
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callList(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callList(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Contains(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Contains")
	caller := c.callContains
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callContains(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callContains(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Remove(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	caller := c.callRemove
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callRemove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callRemove(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Acquire(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Acquire")
	caller := c.callAcquire
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return c.callAcquire(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callAcquire(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Renew(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Renew")
	caller := c.callRenew
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return c.callRenew(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callRenew(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Release(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Release")
	caller := c.callRelease
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return c.callRelease(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callRelease(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceProtobufClient) Import(ctx context.Context, in *ImportRequest) (*ImportResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Import")
	caller := c.callImport
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ImportRequest) (*ImportResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ImportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ImportRequest) when calling interceptor")
					}
					return c.callImport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ImportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ImportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceProtobufClient) callImport(ctx context.Context, in *ImportRequest) (*ImportResponse, error) {
	out := new(ImportResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================
// KVService JSON Client
// =====================

type kVServiceJSONClient struct {
	client      HTTPClient
	urls        [11]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewKVServiceJSONClient creates a JSON client that implements the KVService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewKVServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) KVService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "protocol", "KVService")
	urls := [11]string{
		serviceURL + "Put",
		serviceURL + "Get",
		serviceURL + "Delete",
		serviceURL + "Append",
		serviceURL + "List",
		serviceURL + "Contains",
		serviceURL + "Remove",
		serviceURL + "Acquire",
		serviceURL + "Renew",
		serviceURL + "Release",
		serviceURL + "Import",
	}

	return &kVServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *kVServiceJSONClient) Put(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Put")
	caller := c.callPut
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return c.callPut(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callPut(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Get(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	caller := c.callGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return c.callGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callGet(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Delete(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	caller := c.callDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return c.callDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callDelete(ctx context.Context, in *SimpleRequest) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Append(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Append")
	caller := c.callAppend
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callAppend(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callAppend(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) List(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "List")
	caller := c.callList
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callList(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callList(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Contains(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Contains")
	caller := c.callContains
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callContains(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callContains(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Remove(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	caller := c.callRemove
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return c.callRemove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callRemove(ctx context.Context, in *PrefixRequest) (*PrefixResponse, error) {
	out := new(PrefixResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Acquire(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Acquire")
	caller := c.callAcquire
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return c.callAcquire(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callAcquire(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Renew(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Renew")
	caller := c.callRenew
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return c.callRenew(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callRenew(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Release(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Release")
	caller := c.callRelease
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return c.callRelease(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callRelease(ctx context.Context, in *LeaseRequest) (*LeaseResponse, error) {
	out := new(LeaseResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *kVServiceJSONClient) Import(ctx context.Context, in *ImportRequest) (*ImportResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithMethodName(ctx, "Import")
	caller := c.callImport
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ImportRequest) (*ImportResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ImportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ImportRequest) when calling interceptor")
					}
					return c.callImport(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ImportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ImportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *kVServiceJSONClient) callImport(ctx context.Context, in *ImportRequest) (*ImportResponse, error) {
	out := new(ImportResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// KVService Server Handler
// ========================

type kVServiceServer struct {
	KVService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewKVServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewKVServiceServer(svc KVService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &kVServiceServer{
		KVService:        svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *kVServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *kVServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// KVServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const KVServicePathPrefix = "/twirp/protocol.KVService/"

func (s *kVServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "protocol")
	ctx = ctxsetters.WithServiceName(ctx, "KVService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "protocol.KVService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "Put":
		s.servePut(ctx, resp, req)
		return
	case "Get":
		s.serveGet(ctx, resp, req)
		return
	case "Delete":
		s.serveDelete(ctx, resp, req)
		return
	case "Append":
		s.serveAppend(ctx, resp, req)
		return
	case "List":
		s.serveList(ctx, resp, req)
		return
	case "Contains":
		s.serveContains(ctx, resp, req)
		return
	case "Remove":
		s.serveRemove(ctx, resp, req)
		return
	case "Acquire":
		s.serveAcquire(ctx, resp, req)
		return
	case "Renew":
		s.serveRenew(ctx, resp, req)
		return
	case "Release":
		s.serveRelease(ctx, resp, req)
		return
	case "Import":
		s.serveImport(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *kVServiceServer) servePut(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePutJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) servePutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Put")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SimpleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Put
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return s.KVService.Put(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SimpleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimpleResponse and nil error while calling Put. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) servePutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Put")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SimpleRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Put
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return s.KVService.Put(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SimpleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimpleResponse and nil error while calling Put. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SimpleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Get
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return s.KVService.Get(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SimpleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimpleResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Get")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SimpleRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Get
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return s.KVService.Get(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SimpleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimpleResponse and nil error while calling Get. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveDelete(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveDeleteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(SimpleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Delete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return s.KVService.Delete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SimpleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimpleResponse and nil error while calling Delete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveDeleteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Delete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(SimpleRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Delete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*SimpleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*SimpleRequest) when calling interceptor")
					}
					return s.KVService.Delete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*SimpleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*SimpleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *SimpleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SimpleResponse and nil error while calling Delete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveAppend(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAppendJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAppendProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveAppendJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Append")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PrefixRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Append
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.Append(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling Append. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveAppendProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Append")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PrefixRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Append
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.Append(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling Append. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveList(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveListJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "List")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PrefixRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.List
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.List(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling List. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveListProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "List")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PrefixRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.List
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.List(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling List. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveContains(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveContainsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveContainsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveContainsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Contains")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PrefixRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Contains
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.Contains(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling Contains. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveContainsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Contains")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PrefixRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Contains
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.Contains(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling Contains. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveRemove(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveRemoveJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(PrefixRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Remove
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.Remove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling Remove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveRemoveProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Remove")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(PrefixRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Remove
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *PrefixRequest) (*PrefixResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*PrefixRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*PrefixRequest) when calling interceptor")
					}
					return s.KVService.Remove(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*PrefixResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*PrefixResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *PrefixResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *PrefixResponse and nil error while calling Remove. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveAcquire(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAcquireJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAcquireProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveAcquireJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Acquire")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(LeaseRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Acquire
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return s.KVService.Acquire(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaseResponse and nil error while calling Acquire. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveAcquireProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Acquire")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(LeaseRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Acquire
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return s.KVService.Acquire(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaseResponse and nil error while calling Acquire. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveRenew(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRenewJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRenewProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveRenewJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Renew")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(LeaseRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Renew
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return s.KVService.Renew(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaseResponse and nil error while calling Renew. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveRenewProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Renew")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(LeaseRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Renew
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return s.KVService.Renew(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaseResponse and nil error while calling Renew. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveRelease(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveReleaseJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveReleaseProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveReleaseJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Release")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(LeaseRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Release
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return s.KVService.Release(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaseResponse and nil error while calling Release. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveReleaseProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Release")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(LeaseRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Release
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *LeaseRequest) (*LeaseResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*LeaseRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*LeaseRequest) when calling interceptor")
					}
					return s.KVService.Release(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*LeaseResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*LeaseResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *LeaseResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *LeaseResponse and nil error while calling Release. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveImport(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveImportJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveImportProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *kVServiceServer) serveImportJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Import")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ImportRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.KVService.Import
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ImportRequest) (*ImportResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ImportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ImportRequest) when calling interceptor")
					}
					return s.KVService.Import(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ImportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ImportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ImportResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ImportResponse and nil error while calling Import. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) serveImportProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Import")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ImportRequest)
	if err = reqContent.UnmarshalVT(buf); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.KVService.Import
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ImportRequest) (*ImportResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ImportRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ImportRequest) when calling interceptor")
					}
					return s.KVService.Import(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ImportResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ImportResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ImportResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ImportResponse and nil error while calling Import. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := respContent.MarshalVT()
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *kVServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *kVServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *kVServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "protocol", "KVService")
}

var twirpFileDescriptor1 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x95, 0x63, 0x70, 0x60, 0xf8, 0x68, 0xb4, 0x45, 0x09, 0xa5, 0x6a, 0x4b, 0x2c, 0xa5, 0x45,
	0x6a, 0x65, 0x24, 0x7a, 0x68, 0x1a, 0x94, 0x43, 0x1a, 0xa4, 0xb6, 0x4a, 0x0e, 0xa9, 0x13, 0x71,
	0xe8, 0x05, 0x11, 0x33, 0x24, 0x16, 0x66, 0xd7, 0xd9, 0x5d, 0x43, 0xf8, 0x11, 0xfd, 0x0d, 0xfd,
	0xab, 0x95, 0x77, 0x6d, 0x6c, 0x9a, 0x53, 0x38, 0xb1, 0x6f, 0xe6, 0xbd, 0xd9, 0x99, 0xc7, 0x78,
	0xe1, 0xa5, 0x08, 0xd1, 0xeb, 0x86, 0x9c, 0x49, 0xd6, 0x9d, 0x2d, 0x1c, 0x75, 0x20, 0x25, 0xf5,
	0xe3, 0xb1, 0xa0, 0xf5, 0xf6, 0x8e, 0xb1, 0xbb, 0x00, 0x35, 0xe1, 0x36, 0x9a, 0x76, 0x27, 0x11,
	0x1f, 0x4b, 0x9f, 0x51, 0xcd, 0xb4, 0xbf, 0x40, 0xed, 0xda, 0x9f, 0x87, 0x01, 0xba, 0xf8, 0x10,
	0xa1, 0x90, 0x64, 0x0f, 0xcc, 0x19, 0xae, 0x9a, 0x46, 0xdb, 0xe8, 0x54, 0xdd, 0xf8, 0x48, 0x1a,
	0x50, 0x5c, 0x8c, 0x83, 0x08, 0x9b, 0x3b, 0x2a, 0xa6, 0x81, 0xfd, 0x1e, 0xea, 0xa9, 0x50, 0x84,
	0x8c, 0x0a, 0xcc, 0x78, 0x46, 0x9e, 0x77, 0x0a, 0xb5, 0x2b, 0x8e, 0x53, 0xff, 0x31, 0xbd, 0x60,
	0x1f, 0xac, 0x50, 0x05, 0x12, 0x5e, 0x82, 0x62, 0xb9, 0x77, 0xef, 0x07, 0x93, 0xf4, 0x1a, 0x05,
	0xec, 0x01, 0xd4, 0x53, 0x79, 0x72, 0x4d, 0x0b, 0x4a, 0x2a, 0xc5, 0x91, 0x36, 0x8d, 0xb6, 0xd9,
	0xa9, 0xba, 0x6b, 0x1c, 0xd7, 0xc6, 0x47, 0x5f, 0x48, 0xa1, 0x8a, 0x94, 0xdc, 0x04, 0xd9, 0x7f,
	0x0c, 0xa8, 0x5e, 0xe2, 0x58, 0xac, 0xa7, 0x6c, 0x40, 0x31, 0x88, 0x71, 0xda, 0xab, 0x02, 0xe4,
	0x35, 0x94, 0x29, 0x2e, 0x47, 0x92, 0xcd, 0x90, 0xaa, 0x0a, 0x05, 0xb7, 0x44, 0x71, 0x79, 0x13,
	0x63, 0xf2, 0x06, 0x20, 0xe4, 0xb8, 0x48, 0xb2, 0xa6, 0xca, 0x96, 0xe3, 0x88, 0x4e, 0x7f, 0x04,
	0x53, 0xca, 0xa0, 0x59, 0x6c, 0x1b, 0x9d, 0x4a, 0xef, 0x95, 0xa3, 0x6d, 0x77, 0x52, 0xdb, 0x9d,
	0x41, 0x62, 0xbb, 0x1b, 0xb3, 0xec, 0x23, 0xa8, 0x25, 0xed, 0x64, 0xde, 0xe9, 0xba, 0x86, 0xaa,
	0xab, 0x81, 0xbd, 0x02, 0xb8, 0x18, 0xde, 0xf0, 0x31, 0x15, 0x53, 0xe4, 0xe4, 0x10, 0xaa, 0x42,
	0x39, 0x3e, 0xca, 0xdb, 0x5c, 0xd1, 0xb1, 0x61, 0x1c, 0x22, 0x1f, 0xe0, 0x85, 0x76, 0x73, 0xb4,
	0xb6, 0x68, 0x47, 0x59, 0x54, 0xd7, 0xe1, 0xf3, 0xd4, 0xa8, 0x77, 0x50, 0x51, 0x23, 0x6f, 0x4c,
	0x03, 0x2a, 0xa4, 0xc6, 0xb1, 0x7f, 0x41, 0xed, 0xe7, 0x3c, 0x64, 0x5c, 0xa6, 0x8e, 0x11, 0x28,
	0xcc, 0x70, 0x25, 0x12, 0xcb, 0xd5, 0x99, 0x7c, 0x02, 0x4b, 0xb5, 0x22, 0xd4, 0x2d, 0x95, 0x5e,
	0xc3, 0x49, 0xf7, 0xce, 0xc9, 0xfa, 0x76, 0x13, 0x8e, 0xbd, 0x07, 0xf5, 0xb4, 0xa4, 0x9e, 0xba,
	0xf7, 0xb7, 0x08, 0xe5, 0x8b, 0xe1, 0x35, 0xf2, 0x85, 0xef, 0x21, 0x39, 0x06, 0xf3, 0x2a, 0x92,
	0xe4, 0x20, 0x2b, 0xb2, 0xb1, 0x99, 0xad, 0xe6, 0xd3, 0x44, 0xe2, 0xde, 0x31, 0x98, 0xdf, 0x71,
	0x2b, 0x65, 0x1f, 0xac, 0x01, 0x06, 0x28, 0x71, 0x4b, 0xf1, 0x59, 0x18, 0x22, 0x9d, 0xe4, 0xc5,
	0x1b, 0xcb, 0x9e, 0x17, 0xff, 0xb7, 0xc6, 0x5f, 0xa1, 0x70, 0xe9, 0x0b, 0xb9, 0x8d, 0xf4, 0x14,
	0x4a, 0xe7, 0x8c, 0xca, 0xb1, 0x4f, 0xc5, 0x36, 0xf2, 0x3e, 0x58, 0x2e, 0xce, 0xd9, 0x02, 0xb7,
	0x11, 0x9f, 0xc0, 0xee, 0x99, 0xf7, 0x10, 0xf9, 0x1c, 0xc9, 0x7e, 0x46, 0xca, 0x7f, 0x5b, 0xad,
	0x83, 0x27, 0xf1, 0xf5, 0xdf, 0x54, 0x74, 0x91, 0xe2, 0xf2, 0xf9, 0xca, 0x13, 0xd8, 0x75, 0x51,
	0x7f, 0xa3, 0xcf, 0xd6, 0xf6, 0xc1, 0xd2, 0x6b, 0x97, 0x1f, 0x77, 0x63, 0xb7, 0xf3, 0xe3, 0x6e,
	0x6e, 0xe8, 0xb7, 0xa3, 0x1f, 0xc6, 0xef, 0xc3, 0x19, 0xa3, 0x0e, 0x45, 0x4f, 0x3a, 0xe2, 0xbe,
	0x1b, 0xbf, 0xb6, 0x12, 0x79, 0x37, 0x7b, 0x75, 0x3d, 0x16, 0xdc, 0x5a, 0xea, 0xf4, 0xf9, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0xdd, 0x0d, 0xaa, 0x8d, 0x05, 0x00, 0x00,
}
